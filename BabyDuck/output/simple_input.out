Parse Tree:
program_no_funcs
  program
  simple_input
  ;
  vars
    var
    var_declaration_single
      x
      :
      type_int
      ;
    var_declaration_multiple
      y
      ,
      z
      :
      type_float
      ;
  main
  body_block
    {
    statement_assign
      assign
        x
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                int	5
        ;
    statement_assign
      assign
        y
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                float	3.14
        ;
    statement_assign
      assign
        z
        =
        expression_simple
          exp_add
            term_simple
              factor_expression
                (
                expression_simple
                  exp_add
                    term_simple
                      factor_id	x
                    +
                    term_simple
                      factor_id	y
                )
            +
            term_mult
              factor_id	y
              *
              factor_expression
                (
                expression_compound
                  exp_simple
                    term_simple
                      factor_id	y
                  comparison_op	>
                  exp_simple
                    term_simple
                      factor_id	x
                )
        ;
    statement_print
      print_single
        print
        (
        print_expression
          expression_simple
            exp_simple
              term_simple
                factor_id	z
        )
        ;
    }
  end

IR:
Program(id='simple_input', vars=Vars(declarations=(VarDeclaration(type_='int', names=['x']), VarDeclaration(type_='float', names=['y', 'z']))), funcs=[], body=Body(statements=(Token('OPEN_KEY', '{'), Assign(id='x', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=5, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Assign(id='y', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=3.14, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Assign(id='z', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[('+', Term(left_factor=Factor(value='y', sign='+'), operations=[]))]), op=None, right_expr=None), sign=None), operations=[]), operations=[('+', Term(left_factor=Factor(value='y', sign='+'), operations=[('*', Factor(value=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='y', sign='+'), operations=[]), operations=[]), op='>', right_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[])), sign=None))]))]), op=None, right_expr=None)), Print(contents=[Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='z', sign='+'), operations=[]), operations=[]), op=None, right_expr=None)]), Token('CLOSE_KEY', '}'))))

Symbol Table:
Scope: global
  x: int = 5
  y: float = 3.14
  z: float = 11.280000000000001


Quads:
= 0 None x
= 0 None y
= 0 None z
= x 5 None
= y 3.14 None
+ x y t0
> y x t1
* y t1 t2
+ t0 t2 t3
= z t3 None
print z None None


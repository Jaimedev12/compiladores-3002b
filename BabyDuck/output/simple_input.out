Parse Tree:
program_no_funcs
  program
  simple_input
  ;
  vars
    var
    var_declaration_single
      x
      :
      type_int
      ;
    var_declaration_multiple
      y
      ,
      z
      :
      type_float
      ;
  main
  body_block
    {
    statement_assign
      assign
        x
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                int	5
        ;
    statement_assign
      assign
        y
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                float	3.14
        ;
    statement_assign
      assign
        z
        =
        expression_simple
          exp_compound
            term_simple
              factor_id	x
            +
            term_simple
              factor_id	x
            -
            term_simple
              factor_id	x
        ;
    statement_print
      print_single
        print
        (
        print_expression
          expression_simple
            exp_simple
              term_simple
                factor_id	z
        )
        ;
    }
  end

IR:
Program(id='simple_input', vars=Vars(declarations=(VarDeclaration(type_='int', names=['x']), VarDeclaration(type_='float', names=['y', 'z']))), funcs=[], body=Body(statements=(Assign(id='x', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=5, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Assign(id='y', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=3.14, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Assign(id='z', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[(Token('ADD', '+'), Term(left_factor=Factor(value='x', sign='+'), operations=[])), (Token('SUB', '-'), Term(left_factor=Factor(value='x', sign='+'), operations=[]))]), op=None, right_expr=None)), Print(contents=[Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='z', sign='+'), operations=[]), operations=[]), op=None, right_expr=None)]))))

Symbol Table:
Scope: global
  x: int = 5
  y: float = 3.14
  z: float = 5.0


Quads:
8 1000 1000 x
8 2000 2000 y
8 2001 2001 z
8 1000 1000 None
8 2000 2000 None
4 1000 1000 5000
4 5000 5000 5001
8 2001 2001 None
9 2001 2001 None
--------
Operations.ASSIGN 1000 1000 x
Operations.ASSIGN 2000 2000 y
Operations.ASSIGN 2001 2001 z
Operations.ASSIGN 1000 1000 None
Operations.ASSIGN 2000 2000 None
Operations.DIV 1000 1000 5000
Operations.DIV 5000 5000 5001
Operations.ASSIGN 2001 2001 None
Operations.PRINT 2001 2001 None


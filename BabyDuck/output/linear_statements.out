Parse Tree:
program_all
  program
  linear_statements
  ;
  vars
    var
    var_declaration_single
      x
      :
      type_int
      ;
    var_declaration_multiple
      y
      ,
      z
      :
      type_float
      ;
  funcs_all
    void
    sum
    (
    params_multiple
      a
      :
      type_int
      ,
      b
      :
      type_float
    )
    [
    vars
      var
      var_declaration_single
        c
        :
        type_int
        ;
    body_block
      {
      statement_assign
        assign
          c
          =
          expression_simple
            exp_simple
              term_simple
                factor_cte
                  int	4
          ;
      statement_print
        print_multiple
          print
          (
          print_string	"The sum is: "
          ,
          print_expression
            expression_simple
              exp_compound
                term_simple
                  factor_id	a
                +
                term_simple
                  factor_id	b
                +
                term_simple
                  factor_id	c
          )
          ;
      statement_assign
        assign
          a
          =
          expression_simple
            exp_simple
              term_simple
                factor_cte
                  int	2
          ;
      statement_print
        print_multiple
          print
          (
          print_string	"The sum is: "
          ,
          print_expression
            expression_simple
              exp_compound
                term_simple
                  factor_id	a
                +
                term_simple
                  factor_id	b
                +
                term_simple
                  factor_id	c
          )
          ;
      }
    ]
    ;
  main
  body_block
    {
    statement_assign
      assign
        x
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                int	5
        ;
    statement_assign
      assign
        y
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                float	3.14
        ;
    }
  end

IR:
Program(id='linear_statements', vars=Vars(declarations=(VarDeclaration(type_='int', names=['x']), VarDeclaration(type_='float', names=['y', 'z']))), funcs=(Function(id='sum', params=[Param(name='a', type_='int'), Param(name='b', type_='float')], vars=Vars(declarations=(VarDeclaration(type_='int', names=['c']),)), body=Body(statements=(Assign(id='c', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=4, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Print(contents=['The sum is: ', Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='a', sign='+'), operations=[]), operations=[(<Operations.PLUS: 1>, Term(left_factor=Factor(value='b', sign='+'), operations=[])), (<Operations.PLUS: 1>, Term(left_factor=Factor(value='c', sign='+'), operations=[]))]), op=None, right_expr=None)]), Assign(id='a', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=2, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Print(contents=['The sum is: ', Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='a', sign='+'), operations=[]), operations=[(<Operations.PLUS: 1>, Term(left_factor=Factor(value='b', sign='+'), operations=[])), (<Operations.PLUS: 1>, Term(left_factor=Factor(value='c', sign='+'), operations=[]))]), op=None, right_expr=None)])))),), body=Body(statements=(Assign(id='x', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=5, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Assign(id='y', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=3.14, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)))))

Symbol Table:
Scope: global
  x: int = None
  y: float = None
  z: float = None
Scope: sum
  a: int = None
  b: float = None
  c: int = None
  Param: a: int = None
  Param: b: float = None


Quads:
<0> 8 3002 7000 None
<1> 9 7001 None None
<2> 1 3000 4001 6000
<3> 1 6000 3002 6001
<4> 9 6001 None None
<5> 8 3000 7002 None
<6> 9 7001 None None
<7> 1 3000 4001 6002
<8> 1 6002 3002 6003
<9> 9 6003 None None
<10> 8 1000 7003 None
<11> 8 2000 7004 None
<12> 12 None None None
--------
<0> Operations.ASSIGN c 4
<1> Operations.PRINT The sum is: 
<2> Operations.PLUS a b tf0
<3> Operations.PLUS tf0 c tf1
<4> Operations.PRINT tf1
<5> Operations.ASSIGN a 2
<6> Operations.PRINT The sum is: 
<7> Operations.PLUS a b tf2
<8> Operations.PLUS tf2 c tf3
<9> Operations.PRINT tf3
<10> Operations.ASSIGN x 5
<11> Operations.ASSIGN y 3.14
<12> Operations.END


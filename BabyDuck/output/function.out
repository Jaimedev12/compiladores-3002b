Parse Tree:
program_no_vars
  program
  function
  ;
  funcs_no_vars
    void
    print_sum
    (
    params_multiple
      num1
      :
      type_int
      ,
      num2
      :
      type_int
    )
    [
    body_block
      {
      statement_print
        print_single
          print
          (
          print_expression
            expression_simple
              exp_add
                term_simple
                  factor_id	num1
                +
                term_simple
                  factor_id	num2
          )
          ;
      }
    ]
    ;
  main
  body_block
    {
    statement_f_call
      f_call_with_args
        print_sum
        (
        arguments_multiple
          expression_simple
            exp_simple
              term_simple
                factor_cte
                  int	3
          ,
          expression_simple
            exp_simple
              term_simple
                factor_cte
                  int	4
        )
        ;
    }
  end

IR:
Program(id='function', vars=None, funcs=(Function(return_type=Token('VOID', 'void'), id='print_sum', params=[Param(name='num1', type_='int'), Param(name='num2', type_='int')], vars=None, body=Body(statements=(Token('OPEN_KEY', '{'), Print(contents=[Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='num1', sign='+'), operations=[]), operations=[('+', Term(left_factor=Factor(value='num2', sign='+'), operations=[]))]), op=None, right_expr=None)]), Token('CLOSE_KEY', '}')))),), body=Body(statements=(Token('OPEN_KEY', '{'), FCall(id='print_sum', args=[Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=3, sign='+'), operations=[]), operations=[]), op=None, right_expr=None), Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=4, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)]), Token('CLOSE_KEY', '}'))))

Symbol Table:
Symbol Table:
Scope: global
Scope: print_sum


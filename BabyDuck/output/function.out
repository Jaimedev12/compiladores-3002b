Parse Tree:
program_all
  program
  function
  ;
  vars
    var
    var_declaration_single
      x
      :
      type_int
      ;
  funcs_all
    void
    print_sum
    (
    params_multiple
      num1
      :
      type_int
      ,
      num2
      :
      type_int
    )
    [
    vars
      var
      var_declaration_multiple
        a
        ,
        b
        ,
        c
        ,
        d
        :
        type_int
        ;
    body_block
      {
      statement_print
        print_single
          print
          (
          print_expression
            expression_simple
              exp_compound
                term_simple
                  factor_id	num1
                +
                term_simple
                  factor_id	num2
          )
          ;
      }
    ]
    ;
  main
  body_block
    {
    statement_assign
      assign
        x
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                int	3
        ;
    statement_f_call
      f_call_with_args
        print_sum
        (
        arguments_multiple
          expression_simple
            exp_simple
              term_simple
                factor_id	x
          ,
          expression_simple
            exp_simple
              term_simple
                factor_cte
                  float	4.2
        )
        ;
    }
  end

IR:
Program(id='function', vars=Vars(declarations=(VarDeclaration(type_='int', names=['x']),)), funcs=(Function(id='print_sum', params=[Param(name='num1', type_='int'), Param(name='num2', type_='int')], vars=Vars(declarations=(VarDeclaration(type_='int', names=['a', 'b', 'c', 'd']),)), body=Body(statements=(Print(contents=[Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='num1', sign='+'), operations=[]), operations=[(<Operations.PLUS: 1>, Term(left_factor=Factor(value='num2', sign='+'), operations=[]))]), op=None, right_expr=None)]),))),), body=Body(statements=(Assign(id='x', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=3, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), FCall(id='print_sum', args=[Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[]), op=None, right_expr=None), Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=4.2, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)]))))

Symbol Table:
Scope: global
  x: int = None
Scope: print_sum
  num1: int = None
  num2: int = None
  a: int = None
  b: int = None
  c: int = None
  d: int = None
  Param: num1: int = None
  Param: num2: int = None


Quads:
<0> 11 4 None None
<1> 1 3000 3001 5000
<2> 9 5000 None None
<3> 16 None None None
<4> 8 1000 7000 None
<5> 13 None None None -> print_sum
<6> 14 1000 None None
<7> 8 7001 None 5001
<8> 14 5001 None None
<9> 12 None None None
--------
<0> GOTO 4
<1> PLUS num1 num2 ti0
<2> PRINT ti0
<3> ENDFUNC
<4> ASSIGN x 3
<5> ALLOC -> print_sum
<6> PARAM x
<7> ASSIGN 4.2 ti1
<8> PARAM ti1
<9> END


Parse Tree:
program_all
  program
  if_cycles
  ;
  vars
    var
    var_declaration_single
      x
      :
      type_int
      ;
  funcs_all
    void
    test
    (
    params_single
      a
      :
      type_int
    )
    [
    vars
      var
      var_declaration_single
        c
        :
        type_int
        ;
    body_block
      {
      statement_condition
        condition_else
          if
          (
          expression_compound
            exp_simple
              term_simple
                factor_id	a
            comparison_op	>
            exp_simple
              term_simple
                factor_cte
                  int	2
          )
          body_block
            {
            statement_assign
              assign
                c
                =
                expression_simple
                  exp_compound
                    term_simple
                      factor_id	a
                    +
                    term_simple
                      factor_cte
                        int	2
                ;
            }
          else
          body_block
            {
            statement_assign
              assign
                c
                =
                expression_simple
                  exp_compound
                    term_simple
                      factor_id	a
                    -
                    term_simple
                      factor_cte
                        int	2
                ;
            }
          ;
      }
    ]
    ;
  main
  body_block
    {
    statement_assign
      assign
        x
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                int	2
        ;
    statement_condition
      condition_if
        if
        (
        expression_compound
          exp_simple
            term_simple
              factor_id	x
          comparison_op	<
          exp_simple
            term_simple
              factor_cte
                int	5
        )
        body_block
          {
          statement_assign
            assign
              x
              =
              expression_simple
                exp_simple
                  term_simple
                    factor_cte
                      int	5
              ;
          }
        ;
    statement_cycle
      cycle
        while
        (
        expression_compound
          exp_simple
            term_simple
              factor_id	x
          comparison_op	>
          exp_simple
            term_simple
              factor_cte
                int	0
        )
        do
        body_block
          {
          statement_assign
            assign
              x
              =
              expression_simple
                exp_compound
                  term_simple
                    factor_id	x
                  -
                  term_simple
                    factor_cte
                      int	1
              ;
          }
        ;
    }
  end

IR:
Program(id='if_cycles', vars=Vars(declarations=(VarDeclaration(type_='int', names=['x']),)), funcs=(Function(id='test', params=[Param(name='a', type_='int')], vars=Vars(declarations=(VarDeclaration(type_='int', names=['c']),)), body=Body(statements=(Condition(expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='a', sign='+'), operations=[]), operations=[]), op=<Operations.GREATER_THAN: 6>, right_expr=Exp(left_term=Term(left_factor=Factor(value=2, sign='+'), operations=[]), operations=[])), if_body=Body(statements=(Assign(id='c', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='a', sign='+'), operations=[]), operations=[(<Operations.PLUS: 1>, Term(left_factor=Factor(value=2, sign='+'), operations=[]))]), op=None, right_expr=None)),)), else_body=Body(statements=(Assign(id='c', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='a', sign='+'), operations=[]), operations=[(<Operations.MINUS: 2>, Term(left_factor=Factor(value=2, sign='+'), operations=[]))]), op=None, right_expr=None)),))),))),), body=Body(statements=(Assign(id='x', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=2, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Condition(expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[]), op=<Operations.LESS_THAN: 5>, right_expr=Exp(left_term=Term(left_factor=Factor(value=5, sign='+'), operations=[]), operations=[])), if_body=Body(statements=(Assign(id='x', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=5, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)),)), else_body=None), Cycle(expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[]), op=<Operations.GREATER_THAN: 6>, right_expr=Exp(left_term=Term(left_factor=Factor(value=0, sign='+'), operations=[]), operations=[])), body=Body(statements=(Assign(id='x', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[(<Operations.MINUS: 2>, Term(left_factor=Factor(value=1, sign='+'), operations=[]))]), op=None, right_expr=None)),))))))

Symbol Table:
Scope: global
  x: int = None
Scope: test
  a: int = None
  c: int = None
  Param: a: int = None


Quads:
<0> 6 3000 7000 5000
<1> 10 5000 5 None
<2> 1 3000 7000 5001
<3> 8 3001 5001 None
<4> 11 7 None None
<5> 2 3000 7000 5002
<6> 8 3001 5002 None
<7> 8 1000 7000 None
<8> 5 1000 7001 5003
<9> 10 5003 11 None
<10> 8 1000 7001 None
<11> 12 None None None
--------
<0> Operations.GREATER_THAN a 2 ti0
<1> Operations.GOTOF ti0 5
<2> Operations.PLUS a 2 ti1
<3> Operations.ASSIGN c ti1
<4> Operations.GOTO 7
<5> Operations.MINUS a 2 ti2
<6> Operations.ASSIGN c ti2
<7> Operations.ASSIGN x 2
<8> Operations.LESS_THAN x 5 ti3
<9> Operations.GOTOF ti3 11
<10> Operations.ASSIGN x 5
<11> Operations.END


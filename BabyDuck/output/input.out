Parse Tree:
program_no_funcs
  program
  my_program
  ;
  vars
    var
    var_declaration_single
      x
      :
      type_int
      ;
    var_declaration_single
      y
      :
      type_float
      ;
  main
  body_block
    {
    statement_assign
      assign
        x
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                int	5
        ;
    statement_assign
      assign
        y
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte
                float	3.14
        ;
    statement_print
      print_multiple
        print
        (
        print_expression
          expression_simple
            exp_simple
              term_simple
                factor_id	x
        ,
        print_string	"Hello"
        )
        ;
    statement_cycle
      cycle
        while
        (
        expression_compound
          exp_simple
            term_simple
              factor_id	x
          comparison_op	>
          exp_simple
            term_simple
              factor_cte
                int	0
        )
        do
        body_block
          {
          statement_assign
            assign
              x
              =
              expression_simple
                exp_sub
                  term_simple
                    factor_id	x
                  -
                  term_simple
                    factor_cte
                      int	1
              ;
          }
        ;
    }
  end

IR:
Program(id='my_program', vars=Vars(declarations=(VarDeclaration(type_='int', names=['x']), VarDeclaration(type_='float', names=['y']))), funcs=[], body=Body(statements=(Token('OPEN_KEY', '{'), Assign(id='x', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=5, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Assign(id='y', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value=3.14, sign='+'), operations=[]), operations=[]), op=None, right_expr=None)), Print(contents=[Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[]), op=None, right_expr=None), 'Hello']), Cycle(expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[]), op=Tree(Token('RULE', 'comparison_op'), [Token('GREATER', '>')]), right_expr=Exp(left_term=Term(left_factor=Factor(value=0, sign='+'), operations=[]), operations=[])), body=Body(statements=(Token('OPEN_KEY', '{'), Assign(id='x', expr=Expression(left_expr=Exp(left_term=Term(left_factor=Factor(value='x', sign='+'), operations=[]), operations=[('-', Term(left_factor=Factor(value=1, sign='+'), operations=[]))]), op=None, right_expr=None)), Token('CLOSE_KEY', '}')))), Token('CLOSE_KEY', '}'))))

Symbol Table:
Symbol Table:
Scope: global
  x: int = 5
  y: float = 3.14


start: program

program: PROGRAM ID SEMICOLON vars* funcs* MAIN body_end

body_end: OPEN_KEY statement* CLOSE_KEY

statement: assign 
        | condition 
        | cycle 
        | f_call 
        | print_

assign: ID EQUAL expression SEMICOLON

vars: VAR ID (COMMA ID)* COLON type_ SEMICOLON
vars_func: VAR ID (COMMA ID)* COLON type_ SEMICOLON

funcs: (VOID | type_) ID OPEN_PAREN [params] CLOSE_PAREN OPEN_BRACKET vars_func* body CLOSE_BRACKET SEMICOLON
params: ID COLON type_ (COMMA ID COLON type_)*

f_call: ID OPEN_PAREN [arguments] CLOSE_PAREN SEMICOLON
arguments: expression (COMMA expression)*

print_: PRINT OPEN_PAREN print_content (COMMA print_content)* CLOSE_PAREN SEMICOLON
print_content: expression | ESCAPED_STRING

condition: IF OPEN_PAREN expression CLOSE_PAREN body (ELSE body)? SEMICOLON
cycle: WHILE OPEN_PAREN expression CLOSE_PAREN body SEMICOLON

body: OPEN_KEY statement* CLOSE_KEY

expression: exp (TYPE_CONDITIONAL exp)*
exp: term ((ADD | SUB) term)*
term: factor ((MULT | DIV) factor)*
factor: OPEN_PAREN expression CLOSE_PAREN 
        | (ADD | SUB)? (INT | FLOAT | ID)

type_: "int" | "float"
TYPE_CONDITIONAL: ">" | "<" | "!="

PROGRAM: "program"
MAIN: "main"
VOID: "void"
VAR: "var"
WHILE: "while"
IF: "if"
ELSE: "else"
PRINT: "print"

OPEN_PAREN: "("
CLOSE_PAREN: ")"
OPEN_KEY: "{"
CLOSE_KEY: "}"
OPEN_BRACKET: "["
CLOSE_BRACKET: "]"

MULT: "*"
DIV: "/"
EQUAL: "="
ADD: "+"
SUB: "-"
GREATER: ">"
LESS: "<"
DIFFERENT: "!="
COMMA: ","
SEMICOLON: ";"
COLON: ":"

%import common.ESCAPED_STRING
%import common.INT
%import common.FLOAT
%import common.LETTER
%import common.DIGIT
%import common.WS

ID: "_"? LETTER (LETTER | DIGIT | "_")*

%ignore WS